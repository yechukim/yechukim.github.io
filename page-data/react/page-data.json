{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/react/",
    "result": {"data":{"site":{"siteMetadata":{"title":"예츄 블로그"}},"markdownRemark":{"id":"3fa17d1a-ba41-54d8-a0d5-dbad9ff1892e","excerpt":"목차 Compositon HOC Composition 컴포넌트를 담기 typeof -> type check 확장성 -> 다양한 상황을 품을 수 있다. HOC 고차 컴포넌트 : High Order Component…","html":"<h1>목차</h1>\n<ol>\n<li>Compositon</li>\n<li>HOC</li>\n</ol>\n<h2>Composition</h2>\n<ul>\n<li>컴포넌트를 담기</li>\n<li>typeof -> type check</li>\n<li>확장성 -> 다양한 상황을 품을 수 있다.</li>\n</ul>\n<h2>HOC 고차 컴포넌트</h2>\n<p>: High Order Component</p>\n<p>복잡하게 느껴지지만 간단하게 생각하자.\n고차 컴포넌트는 컴포넌트를 가져와 새 컴포넌트를 반환하는 함수이다.</p>\n<ul>\n<li>HOC -> 함수를 받아서 함수를 리턴</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token comment\">//얘는 컴포넌트가 아니라 함수 </span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">withLoading</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">// 컴포넌트를 받아서 </span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">WithLoadingComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> loading <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span> loading <span class=\"token operator\">...</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> WithLoadingComponent\n<span class=\"token comment\">//컴포넌트를 리턴한다.. </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Memoization</h2>\n<p>: 메모이제이션이란 컴퓨터 프로그램이 동일한 계산을 반복해야 할 떄, 이전에 계산한 값을\n메모리에 저장! 함으로써 동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를\n빠르게 하는 기술이다.</p>\n<h3>React.memo</h3>\n<p>동일한 prop으로 렌더링을 한다면 memo를 사용하여 성능향상</p>\n<ul>\n<li>HOC/ Props 비교해서 메모</li>\n<li>Profiler 리액트 성능 분석 도구</li>\n<li>callback -> 함수를 메모이제이션하고 싶을 떄 useCallback</li>\n<li>value -> 변수를 메모이제이션하고 싶을 때 useMemo</li>\n</ul>\n<h2>Context</h2>\n<ul>\n<li>context를 이용하면 일일이 props를 넘겨주지 않고 트리 전체에 데이터를 제공할 수 있다.</li>\n<li>전역적인 데이터를 관리할 때 쓰는게 좋다.</li>\n</ul>","frontmatter":{"title":"리액트 Composition","date":"September 06, 2022","description":"패스트 캠퍼스 강의 "}},"previous":{"fields":{"slug":"/react-native-project/"},"frontmatter":{"title":"개츠비 첫 글"}},"next":{"fields":{"slug":"/3_usehistory/"},"frontmatter":{"title":"useHistory로 이동시 state 값 넣기, useLocation 의 사용"}}},"pageContext":{"id":"3fa17d1a-ba41-54d8-a0d5-dbad9ff1892e","previousPostId":"83e74c01-acfb-5053-a657-c0d4bef05197","nextPostId":"d51819f6-d9e6-59d8-8d7d-113276398e2f"}},
    "staticQueryHashes": ["2841359383","3274528899"]}